/*Given two strings, a and b , that may or may not be of the same length, determine the minimum number of character deletions required to make a and b anagrams. Any characters can be deleted from either of the strings.

Input :

test cases,t
two strings a and b, for each test case
Output:

Desired O/p

Constraints :

string lengths<=10000

Note :

Anagram of a word is formed by rearranging the letters of the word.

For e.g. -> For the word RAM - MAR,ARM,AMR,RMA etc. are few anagrams.

SAMPLE INPUT 
1
cde
abc
SAMPLE OUTPUT 
4
*/

/* IMPORTANT: Multiple classes and nested static classes are supported */

/*
 * uncomment this if you want to read input.
//imports for BufferedReader
import java.io.BufferedReader;
import java.io.InputStreamReader;

//import for Scanner and other utility classes
import java.util.*;
*/

// Warning: Printing unwanted or ill-formatted data to output will cause the test cases to fail
import java.io.*;
import java.util.*;
class ana
{
	public static void main(String[] args)
	{
		Scanner in = new Scanner(System.in);
		int t=in.nextInt();
		while(t-->0)
		{
		String a = in.next();
		String b = in.next();
		int[] p = new int[26];
		int[] q=new int[26];
		for(int i=0;i<a.length();i++)
		{
			p[a.charAt(i)-97]++;
		}
		for(int i=0;i<b.length();i++)
		{
			q[b.charAt(i)-97]++;
		}
		int ans=0;
		for(int i=0;i<26;i++)
		{
			ans = ans+Math.abs(p[i]-q[i]);
		}
		System.out.println(ans);
	}
	}
}

